/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * USER API
 * User Application API Definition
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8083".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * id
     * @type {number}
     * @memberof Order
     */
    id?: number;
    /**
     * 注文番号
     * @type {string}
     * @memberof Order
     */
    order_id?: string;
    /**
     * 状態（有効、エラー，失効）
     * @type {string}
     * @memberof Order
     */
    order_status?: Order.OrderStatusEnum;
    /**
     * 銘柄名
     * @type {string}
     * @memberof Order
     */
    security_name?: string;
    /**
     * 銘柄コード
     * @type {string}
     * @memberof Order
     */
    security_code?: string;
    /**
     * 市場区分
     * @type {string}
     * @memberof Order
     */
    market_venue?: string;
    /**
     * 売買種別（現物売り、現物買い、ETF買い）
     * @type {string}
     * @memberof Order
     */
    order_side_name?: Order.OrderSideNameEnum;
    /**
     * 注文タイプ/条件
     * @type {string}
     * @memberof Order
     */
    order_condition?: string;
    /**
     * 発注数
     * @type {number}
     * @memberof Order
     */
    order_quantity?: number;
    /**
     * 約定数
     * @type {number}
     * @memberof Order
     */
    execution_quantity?: number;
    /**
     * 平均約定単価
     * @type {number}
     * @memberof Order
     */
    execution_price?: number;
    /**
     * 受注日時
     * @type {Date}
     * @memberof Order
     */
    accept_datetime?: Date;
    /**
     * 有効期限
     * @type {Date}
     * @memberof Order
     */
    expiration_date?: Date;
}

/**
 * @export
 * @namespace Order
 */
export namespace Order {
    /**
     * @export
     * @enum {string}
     */
    export enum OrderStatusEnum {
        VALID = 'ORDER_STATUS_VALID',
        ERROR = 'ORDER_STATUS_ERROR',
        INVALID = 'ORDER_STATUS_INVALID'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum OrderSideNameEnum {
        SELL = 'SELL',
        BUY = 'BUY',
        ETFBUY = 'ETF_BUY'
    }
}

/**
 * 
 * @export
 * @interface OrderList
 */
export interface OrderList {
    /**
     * Next page number
     * @type {number}
     * @memberof OrderList
     */
    next_page_token?: number;
    /**
     * Total Items number
     * @type {number}
     * @memberof OrderList
     */
    total?: number;
    /**
     * 
     * @type {Array<Order>}
     * @memberof OrderList
     */
    list?: Array<Order>;
}


/**
 * OrdersApi - fetch parameter creator
 * @export
 */
export const OrdersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 注文・約定履歴の情報を取得します
         * @summary 注文・約定履歴
         * @param {string} [keyword] 銘柄名・コードなどを入力
         * @param {'ORDER_STATUS_ORDER_IN' | 'ORDER_STATUS_INVALID' | 'ORDER_STATUS_EXECUTION_ALREADY' | 'ORDER_STATUS_OTHERS'} [order_status] 注文状態(注文中、失効・取り消し、約定、その他・エラー)
         * @param {string} [start_time] 期間を指定する：何日から
         * @param {string} [end_time] 期間を指定する：何日まで
         * @param {string} [order_by] Sort order keyword
         * @param {number} [page_token] Request page number
         * @param {number} [page_size] Default page_size is 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserOrdersGet(keyword?: string, order_status?: 'ORDER_STATUS_ORDER_IN' | 'ORDER_STATUS_INVALID' | 'ORDER_STATUS_EXECUTION_ALREADY' | 'ORDER_STATUS_OTHERS', start_time?: string, end_time?: string, order_by?: string, page_token?: number, page_size?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/user/orders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (order_status !== undefined) {
                localVarQueryParameter['order_status'] = order_status;
            }

            if (start_time !== undefined) {
                localVarQueryParameter['start_time'] = start_time;
            }

            if (end_time !== undefined) {
                localVarQueryParameter['end_time'] = end_time;
            }

            if (order_by !== undefined) {
                localVarQueryParameter['order_by'] = order_by;
            }

            if (page_token !== undefined) {
                localVarQueryParameter['page_token'] = page_token;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 注文・約定履歴の情報を取得します
         * @summary 注文・約定履歴
         * @param {string} [keyword] 銘柄名・コードなどを入力
         * @param {'ORDER_STATUS_ORDER_IN' | 'ORDER_STATUS_INVALID' | 'ORDER_STATUS_EXECUTION_ALREADY' | 'ORDER_STATUS_OTHERS'} [order_status] 注文状態(注文中、失効・取り消し、約定、その他・エラー)
         * @param {string} [start_time] 期間を指定する：何日から
         * @param {string} [end_time] 期間を指定する：何日まで
         * @param {string} [order_by] Sort order keyword
         * @param {number} [page_token] Request page number
         * @param {number} [page_size] Default page_size is 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserOrdersGet(keyword?: string, order_status?: 'ORDER_STATUS_ORDER_IN' | 'ORDER_STATUS_INVALID' | 'ORDER_STATUS_EXECUTION_ALREADY' | 'ORDER_STATUS_OTHERS', start_time?: string, end_time?: string, order_by?: string, page_token?: number, page_size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<OrderList>> {
            const localVarFetchArgs = OrdersApiFetchParamCreator(configuration).apiV1UserOrdersGet(keyword, order_status, start_time, end_time, order_by, page_token, page_size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 注文・約定履歴の情報を取得します
         * @summary 注文・約定履歴
         * @param {string} [keyword] 銘柄名・コードなどを入力
         * @param {'ORDER_STATUS_ORDER_IN' | 'ORDER_STATUS_INVALID' | 'ORDER_STATUS_EXECUTION_ALREADY' | 'ORDER_STATUS_OTHERS'} [order_status] 注文状態(注文中、失効・取り消し、約定、その他・エラー)
         * @param {string} [start_time] 期間を指定する：何日から
         * @param {string} [end_time] 期間を指定する：何日まで
         * @param {string} [order_by] Sort order keyword
         * @param {number} [page_token] Request page number
         * @param {number} [page_size] Default page_size is 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserOrdersGet(keyword?: string, order_status?: 'ORDER_STATUS_ORDER_IN' | 'ORDER_STATUS_INVALID' | 'ORDER_STATUS_EXECUTION_ALREADY' | 'ORDER_STATUS_OTHERS', start_time?: string, end_time?: string, order_by?: string, page_token?: number, page_size?: number, options?: any) {
            return OrdersApiFp(configuration).apiV1UserOrdersGet(keyword, order_status, start_time, end_time, order_by, page_token, page_size, options)(fetch, basePath);
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 注文・約定履歴の情報を取得します
     * @summary 注文・約定履歴
     * @param {string} [keyword] 銘柄名・コードなどを入力
     * @param {'ORDER_STATUS_ORDER_IN' | 'ORDER_STATUS_INVALID' | 'ORDER_STATUS_EXECUTION_ALREADY' | 'ORDER_STATUS_OTHERS'} [order_status] 注文状態(注文中、失効・取り消し、約定、その他・エラー)
     * @param {string} [start_time] 期間を指定する：何日から
     * @param {string} [end_time] 期間を指定する：何日まで
     * @param {string} [order_by] Sort order keyword
     * @param {number} [page_token] Request page number
     * @param {number} [page_size] Default page_size is 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public apiV1UserOrdersGet(keyword?: string, order_status?: 'ORDER_STATUS_ORDER_IN' | 'ORDER_STATUS_INVALID' | 'ORDER_STATUS_EXECUTION_ALREADY' | 'ORDER_STATUS_OTHERS', start_time?: string, end_time?: string, order_by?: string, page_token?: number, page_size?: number, options?: any) {
        return OrdersApiFp(this.configuration).apiV1UserOrdersGet(keyword, order_status, start_time, end_time, order_by, page_token, page_size, options)(this.fetch, this.basePath);
    }

}

